-- CREATE TABLE transactions (
--     transaction_id INT PRIMARY KEY,
--     transaction_date DATE,
--     transaction_time TIME,
--     transaction_qty INT,
--     store_id INT,
--     store_location VARCHAR(255),
--     product_id INT,
--     unit_price DECIMAL(10, 2),
--     product_category VARCHAR(255),
--     product_type VARCHAR(255),
--     product_detail VARCHAR(255)
-- );

-- SET datestyle = 'European, DMY';

-- COPY transactions(transaction_id, transaction_date, transaction_time, transaction_qty, store_id, 
-- store_location, product_id, unit_price, product_category, product_type, product_detail)
-- FROM 'D:\mis\sql\Coffee Shop Sales.csv'
-- DELIMITER ','
-- CSV HEADER;


-- 1. Product Sales Analysis:
-- Top 5 Most Frequently Sold Products by Product Category:
-- Retrieve the top 5 products with the highest sales frequency within each product category.
-- Purpose: Identify the most popular products to inform inventory management and marketing strategies.

select product_category, product_type, sum(transaction_qty) from transactions 
group by 1, 2 order by 3 desc limit 5;



-- 2. Monthly Revenue Calculation:
-- Total Revenue Generated by Each Store in January 2023:
-- Calculate the total revenue for each store during January 2023.
-- Purpose: Assess store performance and compare revenue across different locations for that month.

select store_location, sum(transaction_qty * unit_price) from (
	select * from transactions where transaction_date < '2023-02-01'
)
group by store_location;



-- 3. Product Variety in Specific Location:
-- Unique Product Types Sold in 'Lower Manhattan' Store:
-- List all unique product types sold in the store located in Lower Manhattan.
-- Purpose: Understand the product range available at this location to tailor offerings or promotions.

select distinct(product_type) from transactions where store_location = 'Lower Manhattan';



-- 4. Calculate the total number of transactions that occurred before 12:00 PM on any given day,

select sum(count) from (select transaction_date, count(transaction_id) as count from transactions
where transaction_time < '12:00:00'
group by transaction_date);



-- 5. Find the average revenue per transaction for each product category during peak hours 
-- (7 AM - 9 AM) and non-peak hours for each store.

select store_location, product_category,
round(avg(case when extract(hours from transaction_time) between 7 and 9 
then transaction_qty * unit_price end), 2) avg_peak, 
round(avg(case when extract(hours from transaction_time) not between 7 and 9 
then transaction_qty * unit_price end),2) avg_not_peak
from transactions group by 1,2;



-- 6. Retrieve the product with the most price fluctuations (i.e., the largest difference between 
-- the highest and lowest price) across all transactions.

select product_detail, max(unit_price), min(unit_price),
max(unit_price) - min(unit_price) as diff from transactions
group by 1 order by 4 desc limit 1;



-- 7. List all the products that were sold in every store at least once. 

select distinct product_detail, store_location, sum(transaction_qty) from transactions
group by 2,1;



-- 8. Identify the top 5 days where the total transaction quantity deviated the most from 
-- the average daily transaction quantity.


select transaction_date, sum(transaction_qty), 
round(avg(sum(transaction_qty)) over (), 2) avg,
round(sum(transaction_qty) - avg(sum(transaction_qty)) over (), 2) diff
from transactions
group by 1 order by 4 desc limit 5;


-- 9. Retrieve the store location and total revenue for each store where the average 
-- unit price is greater than $2.50.

select store_location, sum(unit_price * transaction_qty) total_revenue from (
select store_location, product_detail, transaction_qty, unit_price, 
avg(unit_price) over (partition by product_detail) from transactions
)
group by store_location order by 2 desc;



-- 10. Identify the product that has the highest average sales quantity per transaction in each store.

select product_detail, avg(unit_price * transaction_qty) avg_sales from transactions group by 1;

select * from (
select store_location, product_id, product_detail, round(avg(transaction_qty), 2) avg_qty, 
row_number() over (partition by store_location order by round(avg(transaction_qty), 2) desc) rank 
from transactions group by 1, 2, 3) where rank = 1;

